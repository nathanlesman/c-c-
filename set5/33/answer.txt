1. What is the difference between pointer variables and arrays
Array = a data structure that represents a collections of elements of the same type stored in contiguos memory locations. Arrays provide a way to store and access multiple values of the same data type using a single variable name.

Pointer = a variable that holds the memory address of another variable. Pointers can be used for storing addresses of dynamically allocated arrays and for arrays that are passed as arguments to functions. 

There are multiple differences:
- Decleration: a pointer is declared as *var_name and an array is declared as data_type var_name[size]
- The nature of pointers is dynamic. The size of a pointer can be resized according to user requirements which means the memory can be allocated or freed at any point in time. In contrast the nature of arrays is static. During runtime, the size of an array in C cannot be resized accroding to user requirements.
- Pointer allocation is done during runtime whereas array allocation is done during compile runtime
- A pointer variable can store the address of only one variable at a time. In contrast an array can store a number of elements the same size as the size of the array variable


2. Differences between a pointer variable and a reference variable:
- a pointer variable and a reference variable is that a pointer can be re-assigned. A reference cannot be re-bound, and must be bound at initialization.
- a pointer variable has its own identity: a distinct, visible memory address that can be taken with the unary & operator and a certain amount of space that can be measured with the sizeof operator. Using those operators on a reference retruns a value corresponding to whatever the reference is bound to; the reference's own address and size are invisible. Since the reference assumes the identity of the original variable in this way, it is convenient to think of a reference as another name for the same variable.
- it is possible to create an array of pointers, but not an array of references
- You can have arbitrarily nested pointers to pointers offering extra levels of indirection. References only offer one level of indirection because references to references collapse


3. done 


4. Pointer arithmetic is the set of valid arthmetic operations that can be performed on pointers. As stated early the pointer variables stores the memory address of another variable. This means that there are only a few operations allowed to perform on pointers. The operations are:
- Increment/Decrement of a pointer --> in the case of increment it is a condition that also comes under addition. When a pointer is incremented, it actually increments by the number equal to the size of the data type for which it is a pointer. Example = an inter pointer that stores address 1000 is incremented, then it will increment by size 4 (size of an int, on most modern systems) and the new address will point to 1004. While if a float type pointer is incremented then it will be incremented by 4 and the new address will be 1004  

- Addition of integer to a pointer --> when a pointer is added with an integer value, the value is first multiplied by the size of the data type and then added to the pointer. Example = using the same example as above where the ptr is an integer pointer that stores 1000 as an address. If we add integer 5 to it using the expression ptr = ptr + 5, then the final address stored in the ptr will be ptr = 1000 + sizeof(int)*5= 1020

- Subtraction of integer to a pointer --> when a pointer is substracted with an integer value, the value is first multiplied by the size of the data type and then substracted from the pointer similar to addition. 

- Subtracting two pointer of the same type --> The subtraction of two pointers is possible only when they have the same data type. The result is generated by calculating the difference between the addresses of the two pointers and calculating how many bits of data is according to the pointers and calculating how many bits of data it is according to the pointer data type. The subtraction of two pointers gives the increments between the two pointers. Example = two integer pointers: ptr1(address:1000)and ptr2(address:1004) are subtracted. The difference between addresses is 4 bytes. Since the size of int is 4 bytes, therefore the increment between ptr1 and ptr2 is given by (4/4) = 1

- Comparions of pointers --> We can compare the two pointers by using the comparison operators. We can implement this by using operators like >, >=, <, <=, ==, !=. It returns true for the valid condition and return false for the unsatisfied condition 

